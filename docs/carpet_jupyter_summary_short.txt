## `try04_1D_carpet_N=3.ipynb`
- 1D chain, N=3
- Fixpoint stability illustrated by quiver plot. Axes: 1st and 2nd cilium phase. (3rd cilium phase is deduced from Poincare plane equation)

## `try05_1D_carpet_find_fixpoint.ipynb`
- Develop a procedure to find fixpoints

## `try06_2D_find_fixpoint.ipynb`
- Find fixpoints for 6x6 triangular lattice.
- No classes yet.

## `try07_CARPET_optimize_friction.ipynb`
- Use `carpet` package
- Optimize & test friction computation
- Introduce classes procedure
- Recalculated fixpoints with `tol=10 ** -8`

## `try08b_CARPET_fixpoint_analysis.ipynb`
- Version b: use fixpoints from `try07` rather than `try06`
- Stability of fixpoints
- Solve cycle after a perturbation equal to real part of an eigenvector


## `try09_1D_carpet_analysis_N=6.ipynb` (and `try09` `a` `b` `c` )
FIXME: have to tranpose L_log_lin !
- Find fixpoints with `tol=10 ** -6`
- Find eigenvalues and eigenvectors of linearized Poincare map
- Visualize eigenvalues: points in dual lattice space; color - magnitude of eigenvalue.

- v2: fix L_log_lin: had to be transposed
  - Reuse fixpoints calculated before; recalculate eigenvector. Results have not visually changed
  - New way to calculate linear map (continued in `try13`): introduce a different set of perturbations with zero mean phase
  - Test non-linearity of Poincare map in vicinity of a fixpoint (continued in `try13`)


### b: N=30
FIXME: have to tranpose L_log_lin !
- Experimental: Consider a different x axis: 1/k
- extra precision fixpoitns (`tol = 10 **-8`)
- extra delta0s: compare eigenvalues
  Result:
  - error around `10 ** -4` - it's OK, but can't trust small values - big relative error
  - OK: sanity check - compare `abs` instead of only real part.
  - NOT OK: eigenvectors?
- Compare eigenvalues vs eigenvector length in dual lattice space.
- Eigenvectors decomposition to the basis of complex exponents of m-twists (<=> discrete fourier transform)
- Neutral perturbation is not the same as `dphidt` (?)
- Plot gij / gii (phi, phi+ delta) - does not look regular
### c: N=120

## `try_10_fixpoint_new_procedure.ipynb`
FIXME: have to tranpose L_log_lin !
- Search for a fixpoint in a form of m-twist, shifted in time.
- Unsuccessful

## `try12_1D_carpet_rotated.ipynb`
FIXME: have to tranpose L_log_lin !
- Rotated chain of cilia
- `a`, `b` `c` - different rotation angle
- Biggest eigenvalues plotted in dual lattice space
- Eigenvectors mapped to m-twists -> plot eigenvalues as a function of $k$
  - trigonometric dependence

## `try12v2_carpet_rotated_*.ipynb`
- FIXED: have to tranpose L_log_lin !

## `try11_carpet_analysis_nx=12_ny=12.ipynb`
- Redo `try08b` for a larger carpet with triangular lattice


## `try13_1D_chain_test_linearized_map.ipynb`
- Distance between fixpoint and its Poincare map image (1)
- Distance between fixpoints at different tolerance
- Ratio between (1) and ||Delta_1 - Delta_0||
- Compare trajectory tangent to neutral perturbation
- Change perturbation strength; find the best fit for the linear term; check inhomogenity.
- Check non-additivity
- Introduce new linearized Poincare map (single-node, mtwist perutrbations)
- Linearized map by fitting
- `L_log_lin` vs `L - I` eigenvalues
- Analyse noise in egenvectors vs eigenvalues magnitude
- Updated procedure to find fixpoints (mean phase = 0); not very good

### `try13b` N=30
- Debug new Poincare map
- Eigenvectors on circles
- Eigenvalues vs k
- Eigenvalues magnitude vs eigenvector decomposition residual
  (Analyse noise in egenvectors vs eigenvalues magnitude)
- MAXIMUM vs MEAN or MIN abs eigenvalue correlation

### `try14a_1D_chain_toy_coupling.ipynb`
- 1D chain (ring)
- Coupling with combination of sine and cosine and higher harmonics
- ev vs k plot: 1 parameter fit for cosine (choose the best fit amongst two)
- expand friction in (phi1, phi1-phi2) basis: failed; and in general I'm interested in Gamma inversed, rather than gamma itself, and its impossible to do such manipulation with Gamma inversed - only in first order approximation

### `try14b_1D_chain_pure_sine_coupling.ipynb`
- Chain (ring) of oscillators, coupled by sine only
- Inhomogenity plot
- Linear stability
- Compare with analytical formula; error scale analysis
- Make plots of eigenvalues as functions of k and m for export
- Test oscillation period (the same as single oscillator)
- First take on global stability
  - Phase space states after many cycles -> trajectories
  - Bar chart of trajectories converged to different fixed points

### `try14b2_1D_chain_trig_coupling_small_N_basins.ipynb`
- N=2 oscillators with sinusoidal coupling
- Check phase trajectories for 2 oscillators

### `try14c_1D_chain_sine_cosine_coupling.ipynb`
- 1D chain (ring), sine + cosine coupling
- Check fixed points
- Find eigenvalues; compare with analytics
  - Eigenvalues as a function of k and m - plots for exports
  - Period as a function of k; and deviation from theory (scales as predicted ~eps^2)
- Basins of attractions
  - Get stylecycler (copied from 14b)
  - Propagate forward or backward in time
  - Plot a bar chart: which fixpoints attract more of initial points (randomly distributed)
  
### `try14d_analyze_distance_measures.ipynb`
- `circstd` gives almost the same measure as `rms` for small `dphi` **when the mean phase of dphi is zero`.
- If it's not zero, `circstd` gives a smaller distance.
- For the purposes of finding distance to a fixed point, it's safe to use `circstd`
- `circstd` also has the advantage of being a standard measure
- When phase shift is imporant, e.g. `[0, 0,1]` is different from `[-1, -1, 0]`, I can keep using RMS of `2 *  sp.sin(0.5 * dphi)` as the measure
- Random phase vector:
 - circ_dist (circ_std) is statistically unlikely to fall below 1
 - order_parameter is statistically unlikely to be greater than 0.55
- Which values of order parameters can a state have simultaneously?


### `try14e_2D_carpet_sine_coupling.ipynb`
- 2D carpet with triangular lattice, sinusoidal coupling
- Linear stability analysis
- basins of attractions: 1000 trajectories -> volume fraction estimation

### `try14f_2D_carpet_sine_cosine_coupling.ipynb`
- Repeat analysis from 14f for oscillators with sine + cosine coupling
- Linear stability analysis
- Basins of attractions
  - Similar as only sine, but there are long-period oscillations of distance
  
### `try14g_2D_carpet_sine_coupling_nx=12_ny=12.ipynb`
- Bigger carpet with sine coupling
- Confirmed that (0,0)-twist has dominative basin of attraction

### `try15_compare_speed_toy_vs_cilia.ipynb`
- Cilia - 150 times slower than toy (sin + cos) couplinG:
    - 1 cycle -> 1 sec
    - 300 cycles -> 5 min
    - 1000 trajectories -> 5000 min ~ 3.5 days
    - Parallelize: 1 day on 4 cores; 2000 trajectories over weekend, assuming that 300 cycles is enough.

- Different tolerance (cilia):
  - 1 Cycle: 2.5 times slower with 10 ** -8 tolerance, compared to 10 ** -6
  - Many cycles: converge to different fixed points sometimes!
  
### `try16_2D_carpet_attraction_basins.ipynb`
- 6x6 carpet
- parallel script to integrate trajectories and esimate basins of attractions
- add dphi to dataframe
- pandas dataframe -> histograms and statistics
- distance and order parameter of random phase vectors relative to the closest fixed point (copied to 14d)
- Parallel job
  - NOT OK: List of solvers -> choose a solver based on thread number (or a queue with available solvers?)
  - Scripts: OK
- Statistics:
- Smoothed out data (pandas running windows)

- Found out fraction of trajectories converged to different fixed points
- Investigate a limit cycle in vicinity of (2,1)-twist: most likely it IS a limit cycle
  - Typical order parameter: from 0.9 to 0.92
- See pptx presentation

### `try16b_2D_sine_cosine_attraction_basins.ipynb`
- Short notebook - simulations for carpet with sine + cosine coupling
- Basins of attractions: cosine and sine; newer version than try14
- See how new convergence condition works: OK

### `try16c_2D_carpet_attraction_basins_rotated_lattice.ipynb`
- Rotated lattice -> trajectories do not converge to a known fixed point?
TODO: update


### `try17_solve_with_noise.ipynb`
- Introduce euler scheme with noise
- tests
-> bin

### `try17b_solve_with_noise_N=6.ipynb`
- Update Euler scheme with noise function
- Tests, visualizations

### `try17c_solve_with_noise_nx=6_ny=6.ipynb`
- Prepare simulations with noise on a larger system
- Test different dt
- Check ciruclar std versus order parameter

### `try18_solve_with_noise_many_nx=6_ny=6.ipynb`
- Simulations with noise; run parallel using external scripts (scripts/integrate_euler/)
- Run for different D, different I.Co.
- TODO: update


### `try18b_analyze_results_try18.ipynb`
- TODO: update



TODO: Update this file